name: Energy Price Forecasting CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ai-portfolio/projects/energy_price_forecasting/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ai-portfolio/projects/energy_price_forecasting/**'
  workflow_dispatch:

env:
  PROJECT_PATH: ai-portfolio/projects/energy_price_forecasting
  PYTHON_VERSION: '3.9'
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: energy-price-forecasting
  STREAMLIT_SERVICE_NAME: energy-dashboard

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        pip install black
        black --check --diff .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.PROJECT_PATH }}/coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and push API image
      run: |
        docker build --target production-api \
          -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
    
    - name: Build and push Streamlit image
      run: |
        docker build --target production-streamlit \
          -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.STREAMLIT_SERVICE_NAME }}:${{ github.sha }} \
          -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.STREAMLIT_SERVICE_NAME }}:latest .
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.STREAMLIT_SERVICE_NAME }}:${{ github.sha }}
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.STREAMLIT_SERVICE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy API to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --concurrency 100 \
          --max-instances 10 \
          --set-env-vars="GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars="ENTSO_E_TOKEN=${{ secrets.ENTSO_E_TOKEN }}" \
          --set-env-vars="OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}"
    
    - name: Deploy Streamlit Dashboard to Cloud Run
      run: |
        gcloud run deploy ${{ env.STREAMLIT_SERVICE_NAME }} \
          --image gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.STREAMLIT_SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --concurrency 50 \
          --max-instances 5 \
          --port 8501 \
          --set-env-vars="GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}"
    
    - name: Get service URLs
      run: |
        API_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
        DASHBOARD_URL=$(gcloud run services describe ${{ env.STREAMLIT_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
        echo "API URL: $API_URL"
        echo "Dashboard URL: $DASHBOARD_URL"
        echo "API_URL=$API_URL" >> $GITHUB_ENV
        echo "DASHBOARD_URL=$DASHBOARD_URL" >> $GITHUB_ENV
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test API health endpoint
        curl -f ${{ env.API_URL }}/health || exit 1
        
        # Test API models endpoint
        curl -f ${{ env.API_URL }}/models/info || echo "Models not loaded yet"
        
        echo "Smoke tests passed!"

  train-model:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Set environment variables
      run: |
        echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
        echo "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" >> $GITHUB_ENV
        echo "ENTSO_E_TOKEN=${{ secrets.ENTSO_E_TOKEN }}" >> $GITHUB_ENV
        echo "OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" >> $GITHUB_ENV
        echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/gcp-key.json" >> $GITHUB_ENV
    
    - name: Create GCP credentials file
      run: echo '${{ secrets.GCP_SA_KEY }}' > ${{ github.workspace }}/gcp-key.json
    
    - name: Run training pipeline
      run: |
        python train.py
      timeout-minutes: 60
    
    - name: Upload training artifacts
      run: |
        # Upload logs and artifacts to GCS
        gsutil -m cp -r logs/ gs://${{ secrets.GCS_BUCKET_NAME }}/training-logs/$(date +%Y%m%d_%H%M%S)/ || true
        gsutil -m cp -r mlruns/ gs://${{ secrets.GCS_BUCKET_NAME }}/mlruns/ || true
    
    - name: Clean up
      run: rm -f ${{ github.workspace }}/gcp-key.json

  notify:
    needs: [deploy, train-model]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.train-model.result }}" == "success" ]]; then
          echo "✅ Deployment and training completed successfully!"
        elif [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Deployment completed successfully, ⚠️ training had issues"
        else
          echo "❌ Deployment or training failed"
        fi
